//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-BFB3-7EA4-F3                      |
// |                             Westpac Banking                             |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("metapc");
	SetCharPrm(INF_COMPILER, 6);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
	LoadTil("gnulnx_x86");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0);
	SetSelector(0X2,0);
	SetSelector(0X3,0);
	SetSelector(0X4,0);
	SetSelector(0X5,0);
	SetSelector(0X6,0);
	SetSelector(0X7,0);
	SetSelector(0X8,0);
	SetSelector(0X9,0);
	SetSelector(0XA,0);
	SetSelector(0XB,0);
	SetSelector(0XC,0);
	SetSelector(0XD,0);
	SetSelector(0XE,0);
	SetSelector(0XF,0);
	;
	AddSegEx(0X80485EC,0X804860F,0X1,1,5,2,ADDSEG_NOSREG);
	SegRename(0X80485EC,".init");
	SegClass (0X80485EC,"CODE");
	SegDefReg(0x80485EC,"ds",0xD);
	SetSegmentType(0X80485EC,2);
	AddSegEx(0X8048610,0X80487E0,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X8048610,".plt");
	SegClass (0X8048610,"CODE");
	SegDefReg(0x8048610,"ds",0xD);
	SetSegmentType(0X8048610,2);
	AddSegEx(0X80487E0,0X8049E42,0X3,1,3,2,ADDSEG_NOSREG);
	SegRename(0X80487E0,".text");
	SegClass (0X80487E0,"CODE");
	SegDefReg(0x80487E0,"ds",0xD);
	SetSegmentType(0X80487E0,2);
	AddSegEx(0X8049E44,0X8049E58,0X4,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8049E44,".fini");
	SegClass (0X8049E44,"CODE");
	SegDefReg(0x8049E44,"ds",0xD);
	SetSegmentType(0X8049E44,2);
	AddSegEx(0X8049E58,0X804A8F8,0X5,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8049E58,".rodata");
	SegClass (0X8049E58,"CONST");
	SegDefReg(0x8049E58,"ds",0xD);
	SetSegmentType(0X8049E58,3);
	AddSegEx(0X804A8F8,0X804A99C,0X6,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804A8F8,".eh_frame_hdr");
	SegClass (0X804A8F8,"CONST");
	SegDefReg(0x804A8F8,"ds",0xD);
	SetSegmentType(0X804A8F8,3);
	AddSegEx(0X804A99C,0X804AC40,0X7,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804A99C,".eh_frame");
	SegClass (0X804A99C,"CONST");
	SegDefReg(0x804A99C,"ds",0xD);
	SetSegmentType(0X804A99C,3);
	AddSegEx(0X804BC40,0X804BC44,0X8,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BC40,".init_array");
	SegClass (0X804BC40,"DATA");
	SegDefReg(0x804BC40,"ds",0xD);
	SetSegmentType(0X804BC40,3);
	AddSegEx(0X804BC44,0X804BC48,0X9,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BC44,".fini_array");
	SegClass (0X804BC44,"DATA");
	SegDefReg(0x804BC44,"ds",0xD);
	SetSegmentType(0X804BC44,3);
	AddSegEx(0X804BC48,0X804BC4C,0XA,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BC48,".jcr");
	SegClass (0X804BC48,"DATA");
	SegDefReg(0x804BC48,"ds",0xD);
	SetSegmentType(0X804BC48,3);
	AddSegEx(0X804BD34,0X804BD38,0XB,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BD34,".got");
	SegClass (0X804BD34,"DATA");
	SegDefReg(0x804BD34,"ds",0xD);
	SetSegmentType(0X804BD34,3);
	AddSegEx(0X804BD38,0X804BDB4,0XC,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BD38,".got.plt");
	SegClass (0X804BD38,"DATA");
	SegDefReg(0x804BD38,"ds",0xD);
	SetSegmentType(0X804BD38,3);
	AddSegEx(0X804BDB4,0X804BDBC,0XD,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BDB4,".data");
	SegClass (0X804BDB4,"DATA");
	SegDefReg(0x804BDB4,"ds",0xD);
	SetSegmentType(0X804BDB4,3);
	AddSegEx(0X804BDBC,0X804BDD4,0XE,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804BDBC,".bss");
	SegClass (0X804BDBC,"BSS");
	SegDefReg(0x804BDBC,"ds",0xD);
	SetSegmentType(0X804BDBC,9);
	AddSegEx(0X804BDD4,0X804BE44,0XF,1,3,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804BDD4,"extern");
	SegClass (0X804BDD4,"");
	SetSegmentType(0X804BDD4,1);
	LowVoids(0x80485EC);
	HighVoids(0x804BE50);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
        EndTypeUpdating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = GetStrucIdByName("node");
	SetType(GetMemberId(id, 0x0), "_BYTE[4]");
	SetType(GetMemberId(id, 0x4), "struct node *");
	SetType(GetMemberId(id, 0x8), "struct node *");
	id = GetStrucIdByName("list_struct");
	SetType(GetMemberId(id, 0x0), "unsigned __int16 *");
	SetType(GetMemberId(id, 0x4), "struct node *");
	SetType(GetMemberId(id, 0x8), "struct node *");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"node",0);
	id = AddStrucEx(-1,"list_struct",0);
	
	id = GetStrucIdByName("node");
	mid = AddStrucMember(id,"gap0",	0,	0x000400,	-1,	4);
	mid = AddStrucMember(id,"prev",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"next",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	SetStrucAlign(id,2);
	
	id = GetStrucIdByName("list_struct");
	mid = AddStrucMember(id,"size",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"next",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"prev",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	SetStrucAlign(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X80485EC,	0,	"; File Name   : Z:\\redteam\\GoogleDrive\\Repositories\\ctf-challenges\\CSAW2017\\pwn\\minesweeper\\minesweeper");
	ExtLinA		(0X80485EC,	1,	"; Format      : ELF for Intel 386 (Executable)");
	ExtLinA		(0X80485EC,	2,	"; Imagebase   : 8048000");
	ExtLinA		(0X80485EC,	3,	"; Interpreter '/lib/ld-linux.so.2'");
	ExtLinA		(0X80485EC,	4,	"; Needed Library 'libc.so.6'");
	ExtLinA		(0X80485EC,	5,	"; ");
	MakeCode	(0X80485EC);
	MakeName	(0X80485EC,	".init_proc");
	MakeCode	(x=0X80485ED);
	OpHex		(x,	1);
	MakeCode	(x=0X80485FB);
	OpOff		(x,	1,	0X804BD38);
	OpOff		(x,	129,	0X804BD38);
	MakeCode	(x=0X804860A);
	OpHex		(x,	1);
	MakeDword	(0X8048610);
	MakeArray	(0X8048610,	0X4);
	MakeCode	(0X8048620);
	MakeName	(0X8048620,	".setsockopt");
	MakeWord	(0X8048626);
	MakeDword	(0X8048628);
	MakeArray	(0X8048628,	0X2);
	MakeCode	(0X8048630);
	MakeName	(0X8048630,	".read");
	MakeWord	(0X8048636);
	MakeDword	(0X8048638);
	MakeArray	(0X8048638,	0X2);
	MakeCode	(0X8048640);
	MakeName	(0X8048640,	"._exit");
	MakeWord	(0X8048646);
	MakeDword	(0X8048648);
	MakeArray	(0X8048648,	0X2);
	MakeCode	(0X8048650);
	MakeName	(0X8048650,	".memcpy");
	MakeWord	(0X8048656);
	MakeDword	(0X8048658);
	MakeArray	(0X8048658,	0X2);
	MakeCode	(0X8048660);
	MakeName	(0X8048660,	".alarm");
	MakeWord	(0X8048666);
	MakeDword	(0X8048668);
	MakeArray	(0X8048668,	0X2);
	MakeCode	(0X8048670);
	MakeName	(0X8048670,	".htons");
	MakeWord	(0X8048676);
	MakeDword	(0X8048678);
	MakeArray	(0X8048678,	0X2);
	MakeCode	(0X8048680);
	MakeName	(0X8048680,	".perror");
	MakeWord	(0X8048686);
	MakeDword	(0X8048688);
	MakeArray	(0X8048688,	0X2);
	MakeCode	(0X8048690);
	MakeName	(0X8048690,	".accept");
	MakeWord	(0X8048696);
	MakeDword	(0X8048698);
	MakeArray	(0X8048698,	0X2);
	MakeCode	(0X80486A0);
	MakeName	(0X80486A0,	".fwrite");
	MakeWord	(0X80486A6);
	MakeDword	(0X80486A8);
	MakeArray	(0X80486A8,	0X2);
	MakeCode	(0X80486B0);
	MakeName	(0X80486B0,	".__sysv_signal");
	MakeWord	(0X80486B6);
	MakeDword	(0X80486B8);
	MakeArray	(0X80486B8,	0X2);
	MakeCode	(0X80486C0);
	MakeName	(0X80486C0,	".__gmon_start__");
	MakeWord	(0X80486C6);
	MakeDword	(0X80486C8);
	MakeArray	(0X80486C8,	0X2);
	MakeCode	(0X80486D0);
	MakeName	(0X80486D0,	".open");
	MakeWord	(0X80486D6);
	MakeDword	(0X80486D8);
	MakeArray	(0X80486D8,	0X2);
	MakeCode	(0X80486E0);
	MakeName	(0X80486E0,	".srand");
	MakeWord	(0X80486E6);
	MakeDword	(0X80486E8);
	MakeArray	(0X80486E8,	0X2);
	MakeCode	(0X80486F0);
	MakeName	(0X80486F0,	".strchr");
	MakeWord	(0X80486F6);
	MakeDword	(0X80486F8);
	MakeArray	(0X80486F8,	0X2);
	MakeCode	(0X8048700);
	MakeName	(0X8048700,	".__libc_start_main");
	MakeWord	(0X8048706);
	MakeDword	(0X8048708);
	MakeArray	(0X8048708,	0X2);
	MakeCode	(0X8048710);
	MakeName	(0X8048710,	".fprintf");
	MakeWord	(0X8048716);
	MakeDword	(0X8048718);
	MakeArray	(0X8048718,	0X2);
	MakeCode	(0X8048720);
	MakeName	(0X8048720,	".bind");
	MakeWord	(0X8048726);
	MakeDword	(0X8048728);
	MakeArray	(0X8048728,	0X2);
	MakeCode	(0X8048730);
	MakeName	(0X8048730,	".memset");
	MakeWord	(0X8048736);
	MakeDword	(0X8048738);
	MakeArray	(0X8048738,	0X2);
	MakeCode	(0X8048740);
	MakeName	(0X8048740,	".__errno_location");
	MakeWord	(0X8048746);
	MakeDword	(0X8048748);
	MakeArray	(0X8048748,	0X2);
	MakeCode	(0X8048750);
	MakeName	(0X8048750,	".rand");
	MakeWord	(0X8048756);
	MakeDword	(0X8048758);
	MakeArray	(0X8048758,	0X2);
	MakeCode	(0X8048760);
	MakeName	(0X8048760,	".fork");
	MakeWord	(0X8048766);
	MakeDword	(0X8048768);
	MakeArray	(0X8048768,	0X2);
	MakeCode	(0X8048770);
	MakeName	(0X8048770,	".htonl");
	MakeWord	(0X8048776);
	MakeDword	(0X8048778);
	MakeArray	(0X8048778,	0X2);
	MakeCode	(0X8048780);
	MakeName	(0X8048780,	".listen");
	MakeWord	(0X8048786);
	MakeDword	(0X8048788);
	MakeArray	(0X8048788,	0X2);
	MakeCode	(0X8048790);
	MakeName	(0X8048790,	".sbrk");
	MakeWord	(0X8048796);
	MakeDword	(0X8048798);
	MakeArray	(0X8048798,	0X2);
	MakeCode	(0X80487A0);
	MakeName	(0X80487A0,	".socket");
	MakeWord	(0X80487A6);
	MakeDword	(0X80487A8);
	MakeArray	(0X80487A8,	0X2);
	MakeCode	(0X80487B0);
	MakeName	(0X80487B0,	".recv");
	MakeWord	(0X80487B6);
	MakeDword	(0X80487B8);
	MakeArray	(0X80487B8,	0X2);
	MakeCode	(0X80487C0);
	MakeName	(0X80487C0,	".close");
	MakeWord	(0X80487C6);
	MakeDword	(0X80487C8);
	MakeArray	(0X80487C8,	0X2);
	MakeCode	(0X80487D0);
	MakeName	(0X80487D0,	".send");
	MakeWord	(0X80487D6);
	MakeDword	(0X80487D8);
	MakeArray	(0X80487D8,	0X2);
	MakeDword	(0X80487E0);
	MakeArray	(0X80487E0,	0XC);
	MakeCode	(0X8048810);
	MakeArray	(0X8048814,	0XC);
	MakeCode	(0X8048820);
	MakeName	(0X8048820,	"stderr_wrangler");
	MakeCode	(x=0X8048825);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X804883B);
	OpHex		(x,	1);
	MakeCode	(x=0X804883E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048845);
	OpHex		(x,	1);
	MakeArray	(0X804884B,	0X5);
	MakeCode	(x=0X8048850);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8048855);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X804885A);
	OpHex		(x,	1);
	MakeCode	(x=0X804885F);
	OpHex		(x,	1);
	MakeCode	(x=0X8048864);
	OpHex		(x,	1);
	MakeCode	(x=0X8048874);
	OpHex		(x,	1);
	MakeCode	(x=0X8048878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X804887F);
	OpHex		(x,	1);
	MakeArray	(0X8048885,	0XB);
	MakeCode	(0X8048890);
	MakeName	(0X8048890,	"init_stderr_maybs");
	MakeCode	(x=0X804889C);
	OpHex		(x,	1);
	MakeArray	(0X80488AE,	0X2);
	MakeCode	(x=0X80488B0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeArray	(0X80488BD,	0X3);
	MakeCode	(0X80488C0);
	MakeCode	(x=0X80488CC);
	OpHex		(x,	1);
	MakeCode	(x=0X80488D2);
	OpHex		(x,	1);
	MakeCode	(0X80488DB);
	MakeCode	(x=0X80488DE);
	OpHex		(x,	1);
	MakeCode	(x=0X80488E4);
	OpHex		(x,	1);
	MakeCode	(x=0X80488FA);
	OpHex		(x,	1);
	MakeCode	(0X8048906);
	MakeCode	(x=0X8048917);
	OpHex		(x,	1);
	MakeComm	(0X804891A,	"n");
	MakeComm	(0X804891B,	"src");
	MakeComm	(0X8048922,	"dest");
	MakeCode	(x=0X8048928);
	OpHex		(x,	1);
	MakeCode	(x=0X804893F);
	OpHex		(x,	1);
	MakeCode	(x=0X8048952);
	OpHex		(x,	1);
	MakeCode	(0X8048968);
	MakeCode	(x=0X804896C);
	OpHex		(x,	1);
	MakeCode	(x=0X80489A1);
	OpHex		(x,	1);
	MakeCode	(x=0X80489A8);
	OpHex		(x,	1);
	MakeCode	(x=0X80489AB);
	OpHex		(x,	1);
	MakeCode	(x=0X80489DE);
	OpHex		(x,	1);
	MakeComm	(0X80489E1,	"oflag");
	MakeCode	(x=0X80489E3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80489ED);
	OpHex		(x,	1);
	MakeCode	(x=0X80489F9);
	OpHex		(x,	1);
	MakeCode	(x=0X80489FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048A06);
	OpHex		(x,	1);
	MakeCode	(x=0X8048A09);
	OpHex		(x,	1);
	MakeComm	(0X8048A0C,	"nbytes");
	MakeComm	(0X8048A11,	"buf");
	MakeComm	(0X8048A12,	"fd");
	MakeCode	(x=0X8048A1A);
	OpHex		(x,	1);
	MakeCode	(x=0X8048A21);
	OpHex		(x,	1);
	MakeCode	(x=0X8048A24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048A2E);
	OpHex		(x,	1);
	MakeCode	(x=0X8048A34);
	OpHex		(x,	1);
	MakeComm	(0X8048A37,	"seed");
	MakeCode	(x=0X8048A3D);
	OpHex		(x,	1);
	MakeCode	(0X8048A49);
	MakeCode	(x=0X8048A70);
	OpHex		(x,	1);
	MakeCode	(x=0X8048A75);
	OpHex		(x,	1);
	MakeCode	(0X8048AA2);
	MakeCode	(x=0X8048AB4);
	OpHex		(x,	1);
	MakeCode	(x=0X8048AB7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048AC4);
	OpHex		(x,	1);
	MakeCode	(x=0X8048AC7);
	OpHex		(x,	1);
	MakeComm	(0X8048ACA,	"int");
	MakeComm	(0X8048ACF,	"s");
	MakeComm	(0X8048AD0,	"fd");
	MakeCode	(x=0X8048AD8);
	OpHex		(x,	1);
	MakeCode	(x=0X8048AE4);
	OpHex		(x,	1);
	MakeCode	(x=0X8048AE7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048AF4);
	OpHex		(x,	1);
	MakeCode	(0X8048AFC);
	MakeCode	(0X8048B05);
	MakeCode	(x=0X8048B35);
	OpHex		(x,	1);
	MakeCode	(x=0X8048B38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048B45);
	OpHex		(x,	1);
	MakeCode	(0X8048B4D);
	MakeComm	(0X8048B5B,	"switch 38 cases ");
	MakeCode	(x=0X8048B5B);
	OpHex		(x,	1);
	MakeCode	(x=0X8048B67);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X8048B6E,	"switch jump");
	MakeRptCmt	(0X8048B70,	"jumptable 08048B6E cases 86,118");
	MakeCode	(0X8048B70);
	MakeCode	(x=0X8048B81);
	OpHex		(x,	1);
	MakeRptCmt	(0X8048B89,	"jumptable 08048B6E cases 85,117");
	MakeCode	(0X8048B89);
	MakeCode	(x=0X8048B93);
	OpHex		(x,	1);
	MakeCode	(x=0X8048B96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048BA3);
	OpHex		(x,	1);
	MakeCode	(0X8048BAB);
	MakeCode	(0X8048BAD);
	MakeCode	(x=0X8048BDD);
	OpHex		(x,	1);
	MakeCode	(x=0X8048BE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048BED);
	OpHex		(x,	1);
	MakeCode	(0X8048BF5);
	MakeCode	(0X8048BFE);
	MakeCode	(x=0X8048C03);
	OpHex		(x,	1);
	MakeCode	(x=0X8048C7C);
	OpHex		(x,	1);
	MakeCode	(x=0X8048C7F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048C8C);
	OpHex		(x,	1);
	MakeCode	(0X8048C94);
	MakeCode	(0X8048C96);
	MakeCode	(0X8048CCF);
	MakeCode	(x=0X8048CD4);
	OpHex		(x,	1);
	MakeCode	(x=0X8048D55);
	OpHex		(x,	1);
	MakeCode	(x=0X8048D58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048D65);
	OpHex		(x,	1);
	MakeCode	(0X8048D6D);
	MakeCode	(x=0X8048D75);
	OpHex		(x,	1);
	MakeCode	(x=0X8048D78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048D85);
	OpHex		(x,	1);
	MakeCode	(0X8048D8D);
	MakeCode	(x=0X8048DAD);
	OpHex		(x,	1);
	MakeCode	(x=0X8048DB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048DBD);
	OpHex		(x,	1);
	MakeCode	(x=0X8048DD1);
	OpHex		(x,	1);
	MakeCode	(0X8048DD9);
	MakeCode	(0X8048E0F);
	MakeCode	(x=0X8048E20);
	OpHex		(x,	1);
	MakeCode	(x=0X8048E23);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048E30);
	OpHex		(x,	1);
	MakeCode	(x=0X8048E44);
	OpHex		(x,	1);
	MakeCode	(0X8048E4C);
	MakeCode	(0X8048E61);
	MakeCode	(0X8048EAD);
	MakeCode	(x=0X8048EBE);
	OpHex		(x,	1);
	MakeCode	(x=0X8048EC1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048ECE);
	OpHex		(x,	1);
	MakeCode	(x=0X8048EE2);
	OpHex		(x,	1);
	MakeCode	(0X8048EEA);
	MakeCode	(0X8048F05);
	MakeCode	(0X8048F46);
	MakeCode	(x=0X8048F57);
	OpHex		(x,	1);
	MakeCode	(x=0X8048F5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048F67);
	OpHex		(x,	1);
	MakeCode	(x=0X8048F7B);
	OpHex		(x,	1);
	MakeCode	(0X8048F83);
	MakeCode	(0X8048F9D);
	MakeCode	(0X8048FD4);
	MakeCode	(x=0X8048FE5);
	OpHex		(x,	1);
	MakeCode	(x=0X8048FE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8048FF5);
	OpHex		(x,	1);
	MakeCode	(x=0X8049009);
	OpHex		(x,	1);
	MakeCode	(0X804900E);
	MakeCode	(0X8049025);
	MakeCode	(0X8049034);
	MakeRptCmt	(0X8049036,	"jumptable 08048B6E default case");
	MakeCode	(x=0X8049036);
	OpHex		(x,	1);
	MakeCode	(x=0X8049039);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049046);
	OpHex		(x,	1);
	MakeRptCmt	(0X804904F,	"jumptable 08048B6E cases 81,113");
	MakeCode	(0X804904F);
	MakeCode	(0X8049055);
	MakeName	(0X8049055,	"initialise_game");
	MakeCode	(x=0X8049058);
	OpHex		(x,	1);
	MakeCode	(x=0X8049070);
	OpHex		(x,	1);
	MakeCode	(x=0X8049073);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049080);
	OpHex		(x,	1);
	MakeCode	(x=0X8049083);
	OpHex		(x,	1);
	MakeComm	(0X8049086,	"a3");
	MakeComm	(0X804908B,	"s");
	MakeComm	(0X804908C,	"fd");
	MakeCode	(x=0X8049094);
	OpHex		(x,	1);
	MakeCode	(x=0X80490A0);
	OpHex		(x,	1);
	MakeCode	(x=0X80490A3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80490B0);
	OpHex		(x,	1);
	MakeCode	(x=0X80490BD);
	OpHex		(x,	1);
	MakeCode	(x=0X80490C7);
	OpHex		(x,	1);
	MakeCode	(x=0X80490CD);
	OpHex		(x,	1);
	MakeCode	(x=0X80490DC);
	OpHex		(x,	1);
	MakeCode	(x=0X80490DF);
	OpHex		(x,	1);
	MakeComm	(0X80490E2,	"n");
	MakeCode	(x=0X80490E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X80490E9,	"dest");
	MakeCode	(x=0X80490F1);
	OpHex		(x,	1);
	MakeCode	(x=0X80490F4);
	OpHex		(x,	1);
	MakeCode	(x=0X8049102);
	OpHex		(x,	1);
	MakeCode	(x=0X8049105);
	OpHex		(x,	1);
	MakeCode	(x=0X8049110);
	OpHex		(x,	1);
	MakeCode	(x=0X8049113);
	OpHex		(x,	1);
	MakeCode	(x=0X8049120);
	OpHex		(x,	1);
	MakeCode	(x=0X8049126);
	OpHex		(x,	1);
	MakeCode	(x=0X8049138);
	OpHex		(x,	1);
	MakeCode	(x=0X804913B);
	OpHex		(x,	1);
	MakeComm	(0X804913E,	"n");
	MakeCode	(x=0X8049143);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X8049148,	"dest");
	MakeCode	(x=0X8049150);
	OpHex		(x,	1);
	MakeCode	(x=0X8049153);
	OpHex		(x,	1);
	MakeCode	(x=0X8049161);
	OpHex		(x,	1);
	MakeCode	(x=0X8049164);
	OpHex		(x,	1);
	MakeCode	(x=0X804916F);
	OpHex		(x,	1);
	MakeCode	(0X804917B);
	MakeCode	(x=0X80491AB);
	OpHex		(x,	1);
	MakeCode	(x=0X80491AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80491BB);
	OpHex		(x,	1);
	MakeCode	(0X80491C8);
	MakeCode	(x=0X80491EE);
	OpHex		(x,	1);
	MakeCode	(x=0X80491F1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80491FE);
	OpHex		(x,	1);
	MakeCode	(0X804920B);
	MakeCode	(0X804920D);
	MakeCode	(x=0X804923D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049240);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X804924D);
	OpHex		(x,	1);
	MakeCode	(0X804925A);
	MakeCode	(0X8049263);
	MakeCode	(x=0X8049268);
	OpHex		(x,	1);
	MakeCode	(x=0X80492E1);
	OpHex		(x,	1);
	MakeCode	(x=0X80492E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80492F1);
	OpHex		(x,	1);
	MakeCode	(0X80492FE);
	MakeCode	(0X8049306);
	MakeCode	(0X8049339);
	MakeCode	(x=0X804933E);
	OpHex		(x,	1);
	MakeCode	(x=0X80493C9);
	OpHex		(x,	1);
	MakeCode	(x=0X80493CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80493D9);
	OpHex		(x,	1);
	MakeCode	(0X80493E6);
	MakeCode	(x=0X80493F5);
	OpHex		(x,	1);
	MakeCode	(x=0X80493FE);
	OpHex		(x,	1);
	MakeCode	(x=0X804941A);
	OpHex		(x,	1);
	MakeCode	(x=0X804941D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X804942A);
	OpHex		(x,	1);
	MakeCode	(0X8049437);
	MakeCode	(x=0X8049446);
	OpHex		(x,	1);
	MakeComm	(0X8049449,	"n");
	MakeComm	(0X804944A,	"c");
	MakeComm	(0X804944C,	"s");
	MakeCode	(x=0X8049454);
	OpHex		(x,	1);
	MakeCode	(x=0X804946B);
	OpHex		(x,	1);
	MakeCode	(x=0X804946F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X8049474,	"stream");
	MakeCode	(x=0X804947A);
	OpHex		(x,	1);
	MakeCode	(x=0X804947F);
	OpHex		(x,	1);
	MakeCode	(x=0X8049482);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X804948F);
	OpHex		(x,	1);
	MakeCode	(x=0X804949C);
	OpHex		(x,	1);
	MakeCode	(x=0X804949F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80494AC);
	OpHex		(x,	1);
	MakeCode	(x=0X80494B9);
	OpHex		(x,	1);
	MakeComm	(0X80494BC,	"a3");
	MakeComm	(0X80494BD,	"s");
	MakeComm	(0X80494C0,	"fd");
	MakeCode	(x=0X80494C8);
	OpHex		(x,	1);
	MakeCode	(x=0X80494D4);
	OpHex		(x,	1);
	MakeCode	(x=0X80494D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80494E4);
	OpHex		(x,	1);
	MakeCode	(x=0X80494F1);
	OpHex		(x,	1);
	MakeComm	(0X80494F4,	"c");
	MakeComm	(0X80494F6,	"s");
	MakeCode	(x=0X80494FE);
	OpHex		(x,	1);
	MakeCode	(x=0X8049519);
	OpHex		(x,	1);
	MakeCode	(x=0X8049526);
	OpHex		(x,	1);
	MakeCode	(x=0X804952C);
	OpHex		(x,	1);
	MakeComm	(0X804952F,	"n");
	MakeComm	(0X8049534,	"c");
	MakeComm	(0X8049536,	"s");
	MakeCode	(x=0X804953E);
	OpHex		(x,	1);
	MakeCode	(x=0X8049541);
	OpHex		(x,	1);
	MakeComm	(0X8049544,	"n");
	MakeCode	(x=0X8049549);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X804954E,	"dest");
	MakeCode	(x=0X8049556);
	OpHex		(x,	1);
	MakeCode	(x=0X8049559);
	OpHex		(x,	1);
	MakeCode	(x=0X8049567);
	OpHex		(x,	1);
	MakeCode	(x=0X804956A);
	OpHex		(x,	1);
	MakeCode	(x=0X8049575);
	OpHex		(x,	1);
	MakeCode	(0X804958D);
	MakeCode	(0X8049592);
	MakeCode	(0X8049594);
	MakeCode	(x=0X8049597);
	OpHex		(x,	1);
	MakeCode	(x=0X80495CB);
	OpHex		(x,	1);
	MakeCode	(x=0X80495CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80495DB);
	OpHex		(x,	1);
	MakeCode	(x=0X80495DE);
	OpHex		(x,	1);
	MakeComm	(0X80495E1,	"int");
	MakeComm	(0X80495E6,	"s");
	MakeComm	(0X80495E7,	"fd");
	MakeCode	(x=0X80495EF);
	OpHex		(x,	1);
	MakeCode	(x=0X80495FB);
	OpHex		(x,	1);
	MakeCode	(x=0X80495FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X804960B);
	OpHex		(x,	1);
	MakeCode	(0X8049618);
	MakeCode	(0X8049621);
	MakeCode	(x=0X8049651);
	OpHex		(x,	1);
	MakeCode	(x=0X8049654);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049661);
	OpHex		(x,	1);
	MakeCode	(0X8049666);
	MakeComm	(0X8049674,	"switch 41 cases ");
	MakeCode	(x=0X8049674);
	OpHex		(x,	1);
	MakeCode	(x=0X804967C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X8049683,	"switch jump");
	MakeRptCmt	(0X8049685,	"jumptable 08049683 cases 78,110");
	MakeCode	(0X8049685);
	MakeCode	(x=0X8049698);
	OpHex		(x,	1);
	MakeRptCmt	(0X804969D,	"jumptable 08049683 cases 73,105");
	MakeCode	(x=0X804969D);
	OpHex		(x,	1);
	MakeComm	(0X80496A3,	"int");
	MakeComm	(0X80496A7,	"int");
	MakeComm	(0X80496A8,	"fd");
	MakeCode	(x=0X80496B0);
	OpHex		(x,	1);
	MakeRptCmt	(0X80496B8,	"jumptable 08049683 cases 81,113");
	MakeCode	(x=0X80496B8);
	OpHex		(x,	1);
	MakeCode	(x=0X80496BB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80496C8);
	OpHex		(x,	1);
	MakeRptCmt	(0X80496D2,	"jumptable 08049683 default case");
	MakeCode	(x=0X80496D2);
	OpHex		(x,	1);
	MakeCode	(x=0X80496D5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80496E2);
	OpHex		(x,	1);
	MakeCode	(0X80496EA);
	MakeCode	(0X80496EC);
	MakeCode	(x=0X80496EF);
	OpHex		(x,	1);
	MakeCode	(0X80496FB);
	MakeCode	(0X8049730);
	MakeCode	(x=0X8049733);
	OpHex		(x,	1);
	MakeCode	(0X804973F);
	MakeCode	(0X8049757);
	MakeName	(0X8049757,	"shit_mem_set");
	MakeCode	(x=0X804975A);
	OpHex		(x,	1);
	MakeCode	(0X8049772);
	MakeCode	(0X804978E);
	MakeName	(0X804978E,	"my_free");
	MakeCode	(x=0X8049791);
	OpHex		(x,	1);
	MakeCode	(0X80497D5);
	MakeCode	(0X8049827);
	MakeCode	(0X8049832);
	MakeCode	(0X8049834);
	MakeName	(0X8049834,	"delink");
	MakeCode	(x=0X8049837);
	OpHex		(x,	1);
	MakeComm	(0X8049869,	"s");
	MakeComm	(0X804986A,	"n");
	MakeComm	(0X804986C,	"size");
	MakeCode	(x=0X804986E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049878);
	OpHex		(x,	1);
	MakeCode	(0X804987D);
	MakeName	(0X804987D,	"my_malloc");
	MakeCode	(x=0X8049880);
	OpHex		(x,	1);
	MakeCode	(x=0X80498A7);
	OpHex		(x,	1);
	MakeCode	(x=0X80498B9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X80498F6);
	MakeCode	(0X804990C);
	MakeCode	(x=0X8049933);
	OpHex		(x,	1);
	MakeComm	(0X8049936,	"a1");
	MakeCode	(x=0X804993E);
	OpHex		(x,	1);
	MakeCode	(0X804994C);
	MakeCode	(x=0X8049952);
	OpHex		(x,	1);
	MakeComm	(0X8049955,	"delta");
	MakeCode	(x=0X804995F);
	OpHex		(x,	1);
	MakeCode	(0X8049975);
	MakeCode	(x=0X80499A0);
	OpHex		(x,	1);
	MakeCode	(x=0X80499DF);
	OpHex		(x,	1);
	MakeComm	(0X80499E2,	"a1");
	MakeCode	(x=0X80499EA);
	OpHex		(x,	1);
	MakeCode	(x=0X80499ED);
	OpHex		(x,	1);
	MakeCode	(x=0X80499F8);
	OpHex		(x,	1);
	MakeCode	(0X8049A03);
	MakeCode	(0X8049A0A);
	MakeName	(0X8049A0A,	"free_wrapper");
	MakeCode	(x=0X8049A0D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049A21);
	OpHex		(x,	1);
	MakeCode	(0X8049A26);
	MakeName	(0X8049A26,	"read_in_sock");
	MakeCode	(x=0X8049A29);
	OpHex		(x,	1);
	MakeCode	(0X8049A3F);
	MakeComm	(0X8049A4D,	"flags");
	MakeComm	(0X8049A4F,	"n");
	MakeComm	(0X8049A50,	"buf");
	MakeComm	(0X8049A51,	"fd");
	MakeCode	(x=0X8049A59);
	OpHex		(x,	1);
	MakeCode	(0X8049A7F);
	MakeCode	(0X8049A86);
	MakeCode	(0X8049A99);
	MakeCode	(0X8049A9B);
	MakeCode	(x=0X8049AA1);
	OpHex		(x,	1);
	MakeComm	(0X8049AA4,	"c");
	MakeComm	(0X8049AA6,	"s");
	MakeCode	(x=0X8049AAE);
	OpHex		(x,	1);
	MakeCode	(0X8049AC2);
	MakeCode	(0X8049AD3);
	MakeCode	(x=0X8049AD6);
	OpHex		(x,	1);
	MakeCode	(0X8049AE2);
	MakeComm	(0X8049AF0,	"flags");
	MakeComm	(0X8049AF2,	"n");
	MakeComm	(0X8049AF3,	"buf");
	MakeComm	(0X8049AF4,	"fd");
	MakeCode	(x=0X8049AFC);
	OpHex		(x,	1);
	MakeCode	(0X8049B22);
	MakeCode	(0X8049B29);
	MakeCode	(0X8049B3C);
	MakeName	(0X8049B3C,	"print_thing");
	MakeCode	(x=0X8049B3F);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B42);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B4D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B50);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B5F);
	OpHex		(x,	1);
	MakeCode	(0X8049B64);
	MakeCode	(x=0X8049B67);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B6A);
	OpHex		(x,	1);
	MakeComm	(0X8049B6D,	"fd");
	MakeCode	(x=0X8049B75);
	OpHex		(x,	1);
	MakeCode	(0X8049B7A);
	MakeCode	(x=0X8049B7E);
	OpHex		(x,	1);
	MakeCode	(x=0X8049B88);
	OpHex		(x,	1);
	MakeCode	(x=0X8049BB1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049BBB);
	OpHex		(x,	1);
	MakeCode	(x=0X8049BBE);
	OpHex		(x,	1);
	MakeCode	(x=0X8049BCA);
	OpHex		(x,	1);
	MakeCode	(x=0X8049BDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049BE6);
	OpHex		(x,	1);
	MakeCode	(x=0X8049BF3);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C01);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C0D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049C1A);
	OpHex		(x,	1);
	MakeCode	(0X8049C27);
	MakeCode	(x=0X8049C2E);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C43);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C4A);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C4D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049C57);
	OpHex		(x,	1);
	MakeCode	(0X8049C64);
	MakeCode	(x=0X8049C6A);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C74);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C82);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C8B);
	OpHex		(x,	1);
	MakeCode	(x=0X8049C92);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CA3);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CAA);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CAD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049CB7);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CC4);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CD1);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CD8);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049CE5);
	OpHex		(x,	1);
	MakeCode	(x=0X8049CF2);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D01);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D0D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049D1A);
	OpHex		(x,	1);
	MakeCode	(0X8049D22);
	MakeCode	(x=0X8049D30);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D33);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049D3D);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D40);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D4B);
	OpHex		(x,	1);
	MakeCode	(0X8049D50);
	MakeCode	(x=0X8049D56);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D63);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D66);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D71);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8049D88);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D8B);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D96);
	OpHex		(x,	1);
	MakeCode	(x=0X8049D9C);
	OpHex		(x,	1);
	MakeCode	(x=0X8049DA7);
	OpHex		(x,	1);
	MakeCode	(x=0X8049DAA);
	OpHex		(x,	1);
	MakeCode	(x=0X8049DB5);
	OpHex		(x,	1);
	MakeCode	(x=0X8049DC0);
	OpHex		(x,	1);
	MakeCode	(0X8049DC8);
	MakeCode	(0X8049DD0);
	MakeCode	(x=0X8049DE1);
	OpHex		(x,	1);
	MakeCode	(x=0X8049DFB);
	OpHex		(x,	1);
	MakeCode	(x=0X8049E29);
	OpHex		(x,	1);
	MakeCode	(0X8049E31);
	MakeArray	(0X8049E33,	0XD);
	MakeCode	(0X8049E40);
	MakeCode	(0X8049E44);
	MakeName	(0X8049E44,	".term_proc");
	MakeCode	(x=0X8049E45);
	OpHex		(x,	1);
	MakeCode	(x=0X8049E53);
	OpHex		(x,	1);
	MakeName	(0X8049E5C,	"_IO_stdin_used");
	MakeStr		(0X8049E60,	0X8049E6C);
	MakeName	(0X8049E60,	"aDevRandom");
	MakeStr		(0X8049E6C,	0X8049E88);
	MakeName	(0X8049E6C,	"aOpeningDevRand");
	MakeStr		(0X8049E88,	0X8049EA2);
	MakeArray	(0X8049EA2,	0X2);
	MakeStr		(0X8049EA4,	0X8049F6D);
	MakeStr		(0X8049F6D,	0X8049F77);
	MakeStr		(0X8049F78,	0X8049FA2);
	MakeArray	(0X8049FA2,	0X2);
	MakeStr		(0X8049FA4,	0X8049FCC);
	MakeStr		(0X8049FCC,	0X8049FEA);
	MakeStr		(0X8049FEA,	0X804A007);
	MakeStr		(0X804A007,	0X804A014);
	MakeStr		(0X804A014,	0X804A033);
	MakeComm	(0X804A034,	"jump table for switch statement");
	MakeDword	(x=0X804A034);
	MakeArray	(x,	0X26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStr		(0X804A0CC,	0X804A125);
	MakeStr		(0X804A125,	0X804A131);
	MakeArray	(0X804A131,	0X3);
	MakeStr		(0X804A134,	0X804A4DD);
	MakeArray	(0X804A4DD,	0X3);
	MakeStr		(0X804A4E0,	0X804A502);
	MakeArray	(0X804A502,	0X2);
	MakeStr		(0X804A504,	0X804A52E);
	MakeArray	(0X804A52E,	0X2);
	MakeStr		(0X804A530,	0X804A552);
	MakeArray	(0X804A552,	0X2);
	MakeStr		(0X804A554,	0X804A578);
	MakeStr		(0X804A578,	0X804A595);
	MakeName	(0X804A578,	"aAllocatedBuffe");
	MakeArray	(0X804A595,	0X3);
	MakeStr		(0X804A598,	0X804A5BC);
	MakeStr		(0X804A5BC,	0X804A661);
	MakeArray	(0X804A661,	0X3);
	MakeStr		(0X804A664,	0X804A704);
	MakeStr		(0X804A704,	0X804A76D);
	MakeArray	(0X804A76D,	0X3);
	MakeStr		(0X804A770,	0X804A79F);
	MakeStr		(0X804A7A0,	0X804A7D5);
	MakeArray	(0X804A7D5,	0X3);
	MakeComm	(0X804A7D8,	"jump table for switch statement");
	MakeDword	(x=0X804A7D8);
	MakeArray	(x,	0X29);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStr		(0X804A87C,	0X804A886);
	MakeArray	(0X804A886,	0X2);
	MakeStr		(0X804A88A,	0X804A899);
	MakeArray	(0X804A899,	0X3);
	MakeStr		(0X804A89C,	0X804A8BB);
	MakeStr		(0X804A8BB,	0X804A8C2);
	MakeStr		(0X804A8C2,	0X804A8CD);
	MakeStr		(0X804A8CD,	0X804A8D2);
	MakeStr		(0X804A8D2,	0X804A8D9);
	MakeStr		(0X804A8D9,	0X804A8E0);
	MakeStr		(0X804A8E0,	0X804A8E5);
	MakeStr		(0X804A8E5,	0X804A8F8);
	MakeDword	(x=0X804BC40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BC44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X804BD34,	"__gmon_start___ptr");
	MakeDword	(x=0X804BD44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BD9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BDA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BDA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BDA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BDAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X804BDB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X804BDBC,	"Copy of shared data");
	MakeDword	(0X804BDBC);
	MakeName	(0X804BDBC,	"stderr");
	MakeByte	(0X804BDC0);
	MakeName	(0X804BDC0,	"stderr_flag_init");
	MakeArray	(0X804BDC1,	0X3);
	MakeDword	(0X804BDC4);
	MakeName	(0X804BDC4,	"list_pointer");
	MakeDword	(0X804BDC8);
	MakeArray	(0X804BDC8,	0X3);
	MakeName	(0X804BDC8,	"list");
	MakeCode	(0X804BDD4);
	MakeName	(0X804BDD4,	"setsockopt");
	MakeCode	(0X804BDD8);
	MakeName	(0X804BDD8,	"read");
	MakeCode	(0X804BDDC);
	MakeName	(0X804BDDC,	"_exit");
	MakeCode	(0X804BDE0);
	MakeName	(0X804BDE0,	"memcpy");
	MakeCode	(0X804BDE4);
	MakeName	(0X804BDE4,	"alarm");
	MakeCode	(0X804BDE8);
	MakeName	(0X804BDE8,	"htons");
	MakeCode	(0X804BDEC);
	MakeName	(0X804BDEC,	"perror");
	MakeCode	(0X804BDF0);
	MakeName	(0X804BDF0,	"accept");
	MakeCode	(0X804BDF4);
	MakeName	(0X804BDF4,	"fwrite");
	MakeCode	(0X804BDF8);
	MakeName	(0X804BDF8,	"__sysv_signal");
	MakeCode	(0X804BDFC);
	MakeName	(0X804BDFC,	"open");
	MakeCode	(0X804BE00);
	MakeName	(0X804BE00,	"srand");
	MakeCode	(0X804BE04);
	MakeName	(0X804BE04,	"strchr");
	MakeCode	(0X804BE08);
	MakeName	(0X804BE08,	"__libc_start_main");
	MakeCode	(0X804BE0C);
	MakeName	(0X804BE0C,	"fprintf");
	MakeCode	(0X804BE10);
	MakeName	(0X804BE10,	"bind");
	MakeCode	(0X804BE14);
	MakeName	(0X804BE14,	"memset");
	MakeCode	(0X804BE18);
	MakeName	(0X804BE18,	"__errno_location");
	MakeCode	(0X804BE1C);
	MakeName	(0X804BE1C,	"rand");
	MakeCode	(0X804BE20);
	MakeName	(0X804BE20,	"fork");
	MakeCode	(0X804BE24);
	MakeName	(0X804BE24,	"htonl");
	MakeCode	(0X804BE28);
	MakeName	(0X804BE28,	"listen");
	MakeCode	(0X804BE2C);
	MakeName	(0X804BE2C,	"sbrk");
	MakeCode	(0X804BE30);
	MakeName	(0X804BE30,	"socket");
	MakeCode	(0X804BE34);
	MakeName	(0X804BE34,	"recv");
	MakeCode	(0X804BE38);
	MakeName	(0X804BE38,	"close");
	MakeCode	(0X804BE3C);
	MakeName	(0X804BE3C,	"send");
	MakeCode	(0X804BE40);
	MakeName	(0X804BE40,	"__gmon_start__");
}

static Functions_0(void) {

	MakeFunction    (0X80485EC,0X804860F);
	SetFunctionFlags(0X80485EC,0x400);
	MakeFunction    (0X8048620,0X8048626);
	SetFunctionFlags(0X8048620,0x44c0);
	SetType(0X8048620, "int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen);");
	MakeFunction    (0X8048630,0X8048636);
	SetFunctionFlags(0X8048630,0x44c0);
	SetType(0X8048630, "ssize_t read(int fd, void *buf, size_t nbytes);");
	MakeFunction    (0X8048640,0X8048646);
	SetFunctionFlags(0X8048640,0x44c1);
	SetType(0X8048640, "void _exit(int status);");
	MakeFunction    (0X8048650,0X8048656);
	SetFunctionFlags(0X8048650,0x44c0);
	SetType(0X8048650, "void *memcpy(void *dest, const void *src, size_t n);");
	MakeFunction    (0X8048660,0X8048666);
	SetFunctionFlags(0X8048660,0x44c0);
	SetType(0X8048660, "unsigned int alarm(unsigned int seconds);");
	MakeFunction    (0X8048670,0X8048676);
	SetFunctionFlags(0X8048670,0x44c0);
	SetType(0X8048670, "uint16_t htons(uint16_t hostshort);");
	MakeFunction    (0X8048680,0X8048686);
	SetFunctionFlags(0X8048680,0x44c0);
	SetType(0X8048680, "void perror(const char *s);");
	MakeFunction    (0X8048690,0X8048696);
	SetFunctionFlags(0X8048690,0x44c0);
	SetType(0X8048690, "int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);");
	MakeFunction    (0X80486A0,0X80486A6);
	SetFunctionFlags(0X80486A0,0x44c0);
	SetType(0X80486A0, "size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);");
	MakeFunction    (0X80486B0,0X80486B6);
	SetFunctionFlags(0X80486B0,0x44c0);
	SetType(0X80486B0, "__sighandler_t __sysv_signal(int sig, __sighandler_t handler);");
	MakeFunction    (0X80486C0,0X80486C6);
	SetFunctionFlags(0X80486C0,0x4c0);
	MakeFunction    (0X80486D0,0X80486D6);
	SetFunctionFlags(0X80486D0,0x44c0);
	SetType(0X80486D0, "int open(const char *file, int oflag, ...);");
	MakeFunction    (0X80486E0,0X80486E6);
	SetFunctionFlags(0X80486E0,0x44c0);
	SetType(0X80486E0, "void srand(unsigned int seed);");
	MakeFunction    (0X80486F0,0X80486F6);
	SetFunctionFlags(0X80486F0,0x44c0);
	SetType(0X80486F0, "char *strchr(const char *s, int c);");
	MakeFunction    (0X8048700,0X8048706);
	SetFunctionFlags(0X8048700,0x44c0);
	SetType(0X8048700, "int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	MakeFunction    (0X8048710,0X8048716);
	SetFunctionFlags(0X8048710,0x44c0);
	SetType(0X8048710, "int fprintf(FILE *stream, const char *format, ...);");
	MakeFunction    (0X8048720,0X8048726);
	SetFunctionFlags(0X8048720,0x44c0);
	SetType(0X8048720, "int bind(int fd, const struct sockaddr *addr, socklen_t len);");
	MakeFunction    (0X8048730,0X8048736);
	SetFunctionFlags(0X8048730,0x44c0);
	SetType(0X8048730, "void *memset(void *s, int c, size_t n);");
	MakeFunction    (0X8048740,0X8048746);
	SetFunctionFlags(0X8048740,0x44c0);
	SetType(0X8048740, "int *__errno_location(void);");
	MakeFunction    (0X8048750,0X8048756);
	SetFunctionFlags(0X8048750,0x44c0);
	SetType(0X8048750, "int rand(void);");
	MakeFunction    (0X8048760,0X8048766);
	SetFunctionFlags(0X8048760,0x44c0);
	SetType(0X8048760, "__pid_t fork(void);");
	MakeFunction    (0X8048770,0X8048776);
	SetFunctionFlags(0X8048770,0x44c0);
	SetType(0X8048770, "uint32_t htonl(uint32_t hostlong);");
	MakeFunction    (0X8048780,0X8048786);
	SetFunctionFlags(0X8048780,0x44c0);
	SetType(0X8048780, "int listen(int fd, int n);");
	MakeFunction    (0X8048790,0X8048796);
	SetFunctionFlags(0X8048790,0x44c0);
	SetType(0X8048790, "void *sbrk(intptr_t delta);");
	MakeFunction    (0X80487A0,0X80487A6);
	SetFunctionFlags(0X80487A0,0x44c0);
	SetType(0X80487A0, "int socket(int domain, int type, int protocol);");
	MakeFunction    (0X80487B0,0X80487B6);
	SetFunctionFlags(0X80487B0,0x44c0);
	SetType(0X80487B0, "ssize_t recv(int fd, void *buf, size_t n, int flags);");
	MakeFunction    (0X80487C0,0X80487C6);
	SetFunctionFlags(0X80487C0,0x44c0);
	SetType(0X80487C0, "int close(int fd);");
	MakeFunction    (0X80487D0,0X80487D6);
	SetFunctionFlags(0X80487D0,0x44c0);
	SetType(0X80487D0, "ssize_t send(int fd, const void *buf, size_t n, int flags);");
	MakeFunction    (0X8048810,0X8048814);
	SetFunctionFlags(0X8048810,0x4400);
	MakeFunction    (0X8048820,0X804884B);
	SetFunctionFlags(0X8048820,0x4400);
	MakeFunction    (0X8048890,0X80488AE);
	SetFunctionFlags(0X8048890,0x4400);
	MakeFunction    (0X80488B0,0X80488DB);
	SetFunctionFlags(0X80488B0,0x400);
	MakeFunction    (0X80488DB,0X8048968);
	SetFunctionFlags(0X80488DB,0x4410);
	MakeFunction    (0X8048968,0X8049055);
	SetFunctionFlags(0X8048968,0x4410);
	MakeFunction    (0X8049055,0X8049594);
	SetFunctionFlags(0X8049055,0x4410);
	SetType(0X8049055, "int __cdecl initialise_game(int fd, int, int);");
	MakeFunction    (0X8049594,0X80496EC);
	SetFunctionFlags(0X8049594,0x4410);
	SetType(0X8049594, "int __cdecl sub_8049594(int fd);");
	MakeFunction    (0X8049730,0X8049757);
	SetFunctionFlags(0X8049730,0x4410);
	MakeFunction    (0X8049757,0X804978E);
	SetFunctionFlags(0X8049757,0x4410);
	MakeFunction    (0X804978E,0X8049834);
	SetFunctionFlags(0X804978E,0x4410);
	MakeFunction    (0X8049834,0X804987D);
	SetFunctionFlags(0X8049834,0x4410);
	SetType(0X8049834, "size_t __cdecl delink(int a1, node *a2);");
	MakeFunction    (0X804987D,0X8049A0A);
	SetFunctionFlags(0X804987D,0x4410);
	MakeFunction    (0X8049A0A,0X8049A26);
	SetFunctionFlags(0X8049A0A,0x4410);
	MakeFunction    (0X8049A26,0X8049AD3);
	SetFunctionFlags(0X8049A26,0x4410);
	SetType(0X8049A26, "int __cdecl read_in_sock(int fd, char *s, int a3, unsigned int max_len);");
	MakeFunction    (0X8049AD3,0X8049B3C);
	SetFunctionFlags(0X8049AD3,0x4410);
	MakeFunction    (0X8049B3C,0X8049B64);
	SetFunctionFlags(0X8049B3C,0x4410);
	MakeFunction    (0X8049B64,0X8049B7A);
	SetFunctionFlags(0X8049B64,0x4410);
	MakeFunction    (0X8049E44,0X8049E58);
	SetFunctionFlags(0X8049E44,0x4400);
	MakeFunction    (0X804BDD4,0X804BDD8);
	SetFunctionFlags(0X804BDD4,0x4400);
	SetType(0X804BDD4, "int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen);");
	MakeFrame(0X804BDD4, 0, 0, 0);
	MakeFunction    (0X804BDD8,0X804BDDC);
	SetFunctionFlags(0X804BDD8,0x4400);
	SetType(0X804BDD8, "ssize_t read(int fd, void *buf, size_t nbytes);");
	MakeFrame(0X804BDD8, 0, 0, 0);
	MakeFunction    (0X804BDDC,0X804BDE0);
	SetFunctionFlags(0X804BDDC,0x4401);
	SetType(0X804BDDC, "void exit(int status);");
	MakeFrame(0X804BDDC, 0, 0, 0);
	MakeFunction    (0X804BDE0,0X804BDE4);
	SetFunctionFlags(0X804BDE0,0x4400);
	SetType(0X804BDE0, "void *memcpy(void *dest, const void *src, size_t n);");
	MakeFrame(0X804BDE0, 0, 0, 0);
	MakeFunction    (0X804BDE4,0X804BDE8);
	SetFunctionFlags(0X804BDE4,0x4400);
	SetType(0X804BDE4, "unsigned int alarm(unsigned int seconds);");
	MakeFrame(0X804BDE4, 0, 0, 0);
	MakeFunction    (0X804BDE8,0X804BDEC);
	SetFunctionFlags(0X804BDE8,0x4400);
	SetType(0X804BDE8, "uint16_t htons(uint16_t hostshort);");
	MakeFrame(0X804BDE8, 0, 0, 0);
	MakeFunction    (0X804BDEC,0X804BDF0);
	SetFunctionFlags(0X804BDEC,0x4400);
	SetType(0X804BDEC, "void perror(const char *s);");
	MakeFrame(0X804BDEC, 0, 0, 0);
	MakeFunction    (0X804BDF0,0X804BDF4);
	SetFunctionFlags(0X804BDF0,0x4400);
	SetType(0X804BDF0, "int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);");
	MakeFrame(0X804BDF0, 0, 0, 0);
	MakeFunction    (0X804BDF4,0X804BDF8);
	SetFunctionFlags(0X804BDF4,0x4400);
	SetType(0X804BDF4, "size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);");
	MakeFrame(0X804BDF4, 0, 0, 0);
	MakeFunction    (0X804BDF8,0X804BDFC);
	SetFunctionFlags(0X804BDF8,0x4400);
	SetType(0X804BDF8, "__sighandler_t _sysv_signal(int sig, __sighandler_t handler);");
	MakeFrame(0X804BDF8, 0, 0, 0);
	MakeFunction    (0X804BDFC,0X804BE00);
	SetFunctionFlags(0X804BDFC,0x4400);
	SetType(0X804BDFC, "int open(const char *file, int oflag, ...);");
	MakeFrame(0X804BDFC, 0, 0, 0);
	MakeFunction    (0X804BE00,0X804BE04);
	SetFunctionFlags(0X804BE00,0x4400);
	SetType(0X804BE00, "void srand(unsigned int seed);");
	MakeFrame(0X804BE00, 0, 0, 0);
	MakeFunction    (0X804BE04,0X804BE08);
	SetFunctionFlags(0X804BE04,0x4400);
	SetType(0X804BE04, "char *strchr(const char *s, int c);");
	MakeFrame(0X804BE04, 0, 0, 0);
	MakeFunction    (0X804BE08,0X804BE0C);
	SetFunctionFlags(0X804BE08,0x4400);
	SetType(0X804BE08, "int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	MakeFunction    (0X804BE0C,0X804BE10);
	SetFunctionFlags(0X804BE0C,0x4400);
	SetType(0X804BE0C, "int fprintf(FILE *stream, const char *format, ...);");
	MakeFrame(0X804BE0C, 0, 0, 0);
	MakeFunction    (0X804BE10,0X804BE14);
	SetFunctionFlags(0X804BE10,0x4400);
	SetType(0X804BE10, "int bind(int fd, const struct sockaddr *addr, socklen_t len);");
	MakeFrame(0X804BE10, 0, 0, 0);
	MakeFunction    (0X804BE14,0X804BE18);
	SetFunctionFlags(0X804BE14,0x4400);
	SetType(0X804BE14, "void *memset(void *s, int c, size_t n);");
	MakeFrame(0X804BE14, 0, 0, 0);
	MakeFunction    (0X804BE18,0X804BE1C);
	SetFunctionFlags(0X804BE18,0x4400);
	SetType(0X804BE18, "int *_errno_location(void);");
	MakeFrame(0X804BE18, 0, 0, 0);
	MakeFunction    (0X804BE1C,0X804BE20);
	SetFunctionFlags(0X804BE1C,0x4400);
	SetType(0X804BE1C, "int rand(void);");
	MakeFrame(0X804BE1C, 0, 0, 0);
	MakeFunction    (0X804BE20,0X804BE24);
	SetFunctionFlags(0X804BE20,0x4400);
	SetType(0X804BE20, "__pid_t fork(void);");
	MakeFrame(0X804BE20, 0, 0, 0);
	MakeFunction    (0X804BE24,0X804BE28);
	SetFunctionFlags(0X804BE24,0x4400);
	SetType(0X804BE24, "uint32_t htonl(uint32_t hostlong);");
	MakeFrame(0X804BE24, 0, 0, 0);
	MakeFunction    (0X804BE28,0X804BE2C);
	SetFunctionFlags(0X804BE28,0x4400);
	SetType(0X804BE28, "int listen(int fd, int n);");
	MakeFrame(0X804BE28, 0, 0, 0);
	MakeFunction    (0X804BE2C,0X804BE30);
	SetFunctionFlags(0X804BE2C,0x4400);
	SetType(0X804BE2C, "void *sbrk(intptr_t delta);");
	MakeFrame(0X804BE2C, 0, 0, 0);
	MakeFunction    (0X804BE30,0X804BE34);
	SetFunctionFlags(0X804BE30,0x4400);
	SetType(0X804BE30, "int socket(int domain, int type, int protocol);");
	MakeFrame(0X804BE30, 0, 0, 0);
	MakeFunction    (0X804BE34,0X804BE38);
	SetFunctionFlags(0X804BE34,0x4400);
	SetType(0X804BE34, "ssize_t recv(int fd, void *buf, size_t n, int flags);");
	MakeFrame(0X804BE34, 0, 0, 0);
	MakeFunction    (0X804BE38,0X804BE3C);
	SetFunctionFlags(0X804BE38,0x4400);
	SetType(0X804BE38, "int close(int fd);");
	MakeFrame(0X804BE38, 0, 0, 0);
	MakeFunction    (0X804BE3C,0X804BE40);
	SetFunctionFlags(0X804BE3C,0x4400);
	SetType(0X804BE3C, "ssize_t send(int fd, const void *buf, size_t n, int flags);");
	MakeFrame(0X804BE3C, 0, 0, 0);
	MakeFunction    (0X804BE40,0X804BE44);
	SetFunctionFlags(0X804BE40,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X80485EC,"es",0XFFFFFFFF,3);
	SetRegEx(0X8048610,"es",0XFFFFFFFF,3);
	SetRegEx(0X80487E0,"es",0XFFFFFFFF,3);
	SetRegEx(0X8049E44,"es",0XFFFFFFFF,3);
	SetRegEx(0X8049E58,"es",0XFFFFFFFF,3);
	SetRegEx(0X804A8F8,"es",0XFFFFFFFF,3);
	SetRegEx(0X804A99C,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BC40,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BC44,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BC48,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BD34,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BD38,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BDB4,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BDBC,"es",0XFFFFFFFF,3);
	SetRegEx(0X804BDD4,"es",0XFFFFFFFF,3);
	SetRegEx(0X80485EC,"ss",0XFFFFFFFF,3);
	SetRegEx(0X8048610,"ss",0XFFFFFFFF,3);
	SetRegEx(0X80487E0,"ss",0XFFFFFFFF,3);
	SetRegEx(0X8049E44,"ss",0XFFFFFFFF,3);
	SetRegEx(0X8049E58,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804A8F8,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804A99C,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BC40,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BC44,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BC48,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BD34,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BD38,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BDB4,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BDBC,"ss",0XFFFFFFFF,3);
	SetRegEx(0X804BDD4,"ss",0XFFFFFFFF,3);
	SetRegEx(0X80485EC,"ds",0XD,3);
	SetRegEx(0X8048610,"ds",0XD,3);
	SetRegEx(0X80487E0,"ds",0XD,3);
	SetRegEx(0X8049E44,"ds",0XD,3);
	SetRegEx(0X8049E58,"ds",0XD,3);
	SetRegEx(0X804A8F8,"ds",0XD,3);
	SetRegEx(0X804A99C,"ds",0XD,3);
	SetRegEx(0X804BC40,"ds",0XD,3);
	SetRegEx(0X804BC44,"ds",0XD,3);
	SetRegEx(0X804BC48,"ds",0XD,3);
	SetRegEx(0X804BD34,"ds",0XD,3);
	SetRegEx(0X804BD38,"ds",0XD,3);
	SetRegEx(0X804BDB4,"ds",0XD,3);
	SetRegEx(0X804BDBC,"ds",0XD,3);
	SetRegEx(0X804BDD4,"ds",0XFFFFFFFF,3);
	SetRegEx(0X80485EC,"fs",0XFFFFFFFF,3);
	SetRegEx(0X8048610,"fs",0XFFFFFFFF,3);
	SetRegEx(0X80487E0,"fs",0XFFFFFFFF,3);
	SetRegEx(0X8049E44,"fs",0XFFFFFFFF,3);
	SetRegEx(0X8049E58,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804A8F8,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804A99C,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BC40,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BC44,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BC48,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BD34,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BD38,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BDB4,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BDBC,"fs",0XFFFFFFFF,3);
	SetRegEx(0X804BDD4,"fs",0XFFFFFFFF,3);
	SetRegEx(0X80485EC,"gs",0XFFFFFFFF,3);
	SetRegEx(0X8048610,"gs",0XFFFFFFFF,3);
	SetRegEx(0X80487E0,"gs",0XFFFFFFFF,3);
	SetRegEx(0X8049E44,"gs",0XFFFFFFFF,3);
	SetRegEx(0X8049E58,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804A8F8,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804A99C,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BC40,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BC44,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BC48,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BD34,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BD38,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BDB4,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BDBC,"gs",0XFFFFFFFF,3);
	SetRegEx(0X804BDD4,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
