0x56006d9e3c77: ret
0x56006d9e334a: ret 0x8b48
0x56006d9e3210: leave; ret
0x56006d9e335b: dec ecx; ret
0x56006d9e3c8a: pop r15; ret
0x56006d9e3050: pop rbp; ret
0x56006d9e3c8b: pop rdi; ret
0x56006d9e3c8d: nop [rax]; ret
0x56006d9e320f: add cl,cl; ret
0x56006d9e32a1: lock leave; ret
0x56006d9e2d96: add esp,0x8; ret
0x56006d9e2d95: add rsp,0x8; ret
0x56006d9e30de: add [rcx],al; ret
0x56006d9e269e: add [rax],al; ret
0x56006d9e3c74: fmul [rax-0x7d]; ret
0x56006d9e3c88: pop r14; pop r15; ret
0x56006d9e3c89: pop rsi; pop r15; ret
0x56006d9e32a0: rex.RB; lock leave; ret
0x56006d9e320b: mov eax,0x0; leave; ret
0x56006d9e320e: add [rax],al; leave; ret
0x56006d9e3347: dec [rax-0x77]; ret 0x8b48
0x56006d9e304e: add [rax],al; pop rbp; ret
0x56006d9e304d: add [rax],r8b; pop rbp; ret
0x56006d9e320d: add [rax],al; add cl,cl; ret
0x56006d9e320a: add eax,0xb8; add cl,cl; ret
0x56006d9e3c94: sub rsp,0x8; add rsp,0x8; ret
0x56006d9e3c95: sub esp,0x8; add rsp,0x8; ret
0x56006d9e2d93: add [rax],al; add rsp,0x8; ret
0x56006d9e3c87: pop rbp; pop r14; pop r15; ret
0x56006d9e329f: mov eax,[rbp-0x10]; leave; ret
0x56006d9e329e: mov rax,[rbp-0x10]; leave; ret
0x56006d9e3c86: pop r13; pop r14; pop r15; ret
0x56006d9e269c: add [rax],al; add [rax],al; ret
0x56006d9e34c0: add eax,0xfff96ae8; dec ecx; ret
0x56006d9e3c24: add eax,0xfff206e8; dec ecx; ret
0x56006d9e304b: nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e320c: add [rax],al; add [rax],al; leave; ret
0x56006d9e3208: add bl,ch; add eax,0xb8; add cl,cl; ret
0x56006d9e3c85: pop rsp; pop r13; pop r14; pop r15; ret
0x56006d9e340b: dec [rax-0x75]; rex.RB; lock leave; ret
0x56006d9e3c84: pop r12; pop r13; pop r14; pop r15; ret
0x56006d9e309c: add [rax],al; add [rax],al; pop rbp; ret
0x56006d9e3357: call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e3048: jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3c92: add [rax],al; sub rsp,0x8; add rsp,0x8; ret
0x56006d9e329d: xchg ecx,eax; mov rax,[rbp-0x10]; leave; ret
0x56006d9e30d9: mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e269a: add [rax],al; add [rax],al; add [rax],al; ret
0x56006d9e3324: fdiv [rdx-0x66]; mov rax,[rbp-0x10]; leave; ret
0x56006d9e329b: fdiv [rdx-0x6f]; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3c83: pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x56006d9e3047: pop rbp; jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e30d8: pop rbp; mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e3206: add [rax],al; add bl,ch; add eax,0xb8; add cl,cl; ret
0x56006d9e3355: mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e34c1: call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e329a: rex.RB fdiv [r10-0x6f]; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3093: or al,0x5d; jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3323: rex.RB fdiv [r10-0x66]; mov rax,[rbp-0x10]; leave; ret
0x56006d9e309a: test [rax],al; add [rax],al; add [rax],al; pop rbp; ret
0x56006d9e3049: loopne 0x56006d9e30b1; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3096: loopne 0x56006d9e30fe; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3c81: or [rbx+0x5d],bl; pop r12; pop r13; pop r14; pop r15; ret
0x56006d9e2d90: call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e2698: add [rax],al; add [rax],al; add [rax],al; add [rax],al; ret
0x56006d9e3209: jmp 0x56006d9e3210 <drop_privs+240>; mov eax,0x0; leave; ret
0x56006d9e2d91: jnp 0x56006d9e2d94 <_init+20>; add [rax],al; add rsp,0x8; ret
0x56006d9e3325: jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e329c: jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3353: mov esi,ecx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e3352: mov rsi,rcx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e3406: jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3045: je 0x56006d9e3050; pop rbp; jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3092: je 0x56006d9e30a0; pop rbp; jmp rax; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3351: cld; mov rsi,rcx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e2696: add [rax],al; add [rax],al; add [rax],al; add [rax],al; add [rax],al; ret
0x56006d9e3204: mov eax,0x1; jmp 0x56006d9e3210 <drop_privs+240>; mov eax,0x0; leave; ret
0x56006d9e3046: or [rbp-0x1],ebx; loopne 0x56006d9e30b1; nop [rax+rax*1+0x0]; pop rbp; ret
0x56006d9e3207: add [rax],al; jmp 0x56006d9e3210 <drop_privs+240>; mov eax,0x0; leave; ret
0x56006d9e30d3: call 0x56006d9e3020; pop rbp; mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e3350: rex.RB cld; mov rsi,rcx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e3298: cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3322: cmp eax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3321: cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3299: cmp eax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3c23: je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e35b4: jmp 0x56006d9e3506 <dofmt+62>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3948: jmp 0x56006d9e360d <doheap+77>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e39f3: jmp 0x56006d9e396e <handle+26>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e334f: mov eax,[rbp-0x4]; mov rsi,rcx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e34bf: je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3297: lock cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3320: lock cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3402: cmp rax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3403: cmp eax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e2d8e: je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e3205: add [rax],eax; add [rax],al; jmp 0x56006d9e3210 <drop_privs+240>; mov eax,0x0; leave; ret
0x56006d9e3947: nop; jmp 0x56006d9e360d <doheap+77>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e334e: lock mov eax,[rbp-0x4]; mov rsi,rcx; mov edi,eax; call 0x56006d9e32a4 <sendlen>; leave; ret
0x56006d9e3401: lock cmp rax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3296: rex.RB; lock cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e331f: rex.RB; lock cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3c21: add [rax],al; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c1e: and eax,0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c1b: xor rcx,ds:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34ba: and eax,0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3400: rex.RB; lock cmp rax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e34bd: add [rax],al; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c1a: xor rcx,fs:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c1c: xor ecx,ds:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e331d: mov rax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e331e: mov eax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e2d8c: test eax,eax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e3295: mov eax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e3294: mov rax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e2d8b: test rax,rax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e34b6: xor rcx,fs:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34b7: xor rcx,ds:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34b8: xor ecx,ds:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c19: clc; xor rcx,fs:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3293: lock mov rax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e322f <recvlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e331c: lock mov rax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e32c1 <sendlen+29>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e31ff: call 0x56006d9e2f60 <perror@plt>; mov eax,0x1; jmp 0x56006d9e3210 <drop_privs+240>; mov eax,0x0; leave; ret
0x56006d9e33fe: mov rax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e33ff: mov eax,[rbp-0x10]; cmp rax,[rbp-0x28]; jb 0x56006d9e337f <recvlen_until+33>; mov rax,[rbp-0x10]; leave; ret
0x56006d9e34b5: clc; xor rcx,fs:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c1f: sub [rax],al; add [rax],al; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c18: rex.WRB clc; xor rcx,fs:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34bb: sub [rax],al; add [rax],al; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e30ce: call 0x56006d9e2fb0 <__cxa_finalize@plt>; call 0x56006d9e3020; pop rbp; mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e2d89: and [rax],al; test rax,rax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e34b4: rex.WRB clc; xor rcx,fs:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e39f1: jmp 0x56006d9e39f8 <handle+164>; jmp 0x56006d9e396e <handle+26>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e2d86: add eax,0x20224d; test rax,rax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e3c16: mov rcx,[rbp-0x8]; xor rcx,fs:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3c17: mov ecx,[rbp-0x8]; xor rcx,fs:0x28; je 0x56006d9e3c2a <main+555>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e35af: call 0x56006d9e2eb0 <dprintf@plt>; jmp 0x56006d9e3506 <dofmt+62>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34b3: mov ecx,[rbp-0x8]; xor rcx,fs:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e34b2: mov rcx,[rbp-0x8]; xor rcx,fs:0x28; je 0x56006d9e34c6 <dostack+180>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e3945: jmp 0x56006d9e394d <doheap+909>; nop; jmp 0x56006d9e360d <doheap+77>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e30cc: and [rax],al; call 0x56006d9e2fb0 <__cxa_finalize@plt>; call 0x56006d9e3020; pop rbp; mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e35aa: mov eax,0x0; call 0x56006d9e2eb0 <dprintf@plt>; jmp 0x56006d9e3506 <dofmt+62>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e35ad: add [rax],al; call 0x56006d9e2eb0 <dprintf@plt>; jmp 0x56006d9e3506 <dofmt+62>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
0x56006d9e30c9: cmp eax,0x201f3a; call 0x56006d9e2fb0 <__cxa_finalize@plt>; call 0x56006d9e3020; pop rbp; mov [rip+0x201f30],0x1 # 0x56006dbe5010; ret
0x56006d9e2d84: mov rax,[rip+0x20224d] # 0x56006dbe4fd8; test rax,rax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e2d85: mov eax,[rip+0x20224d] # 0x56006dbe4fd8; test rax,rax; je 0x56006d9e2d95 <_init+21>; call 0x56006d9e2f10 <__gmon_start__@plt>; add rsp,0x8; ret
0x56006d9e39ef: je 0x56006d9e39fd <handle+169>; jmp 0x56006d9e39f8 <handle+164>; jmp 0x56006d9e396e <handle+26>; call 0x56006d9e2e30 <__stack_chk_fail@plt>; leave; ret
